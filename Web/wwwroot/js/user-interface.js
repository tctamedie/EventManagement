function createTabs(config, record,action) {
    console.log(config);
    var errorDiv = $("<div></div>").attr("id", "divModalError");
    var modal = $("#user-interface");
    modal.empty();
    modal.append(errorDiv);
    var tabs = $("<ul></ul>").addClass("nav nav-tabs");
    var contents = $("<div></div>").addClass("tab-content");

    var orderedTabs = config.tabs.sort((a, b) => { return a.order - b.order });
    orderedTabs.forEach(s => {
        var activeClass = s.isActive ? "active" : "";
        console.table(activeClass, s);
        var tab = $("<li></li>").addClass(`nav-item ${activeClass}`);
        var anchor = $("<a></a>")
            .addClass("nav-link " + activeClass)
            .attr("href", '#' + s.id)
            .attr("data-toggle", "tab")
            .attr("aria-expanded", s.isActive)
            .text(s.name);

        var content = $("<div></div>").addClass("tab-pane fade").attr("id", s.id);

        tab.append(anchor);
        console.log(s);
        if (config.tabs.length == 1) {
            CreateForm(modal, s.rows, record, action);
        } else {
            tabs.append(tab);
            contents.append(content);
            CreateForm(content, s.rows, record, action);
        }


    });
    if (config.tabs.length == 1) {
        tabs.hide();
    } else {
        modal.append(tabs);
        modal.append(contents);
    }
    LockForm(action, config, config.keyField);
}
function CreateForm(tab, data, record, action) {

    var rows = data.sort((a, b) => { return a.order - b.order });
    rows.forEach(row => {
        tab.append(CreateRow(row, record, action));
    });
    
}
function CreateRow(row, record, action) {
    var hiddens = row.fields.filter(s => s.isHidden).length;
    var allFields = row.fields.length;
    var brow = $(`<div></div>`).addClass("row form-control-row-spacer");
    if (hiddens === allFields)
    {
        brow.attr("style", "display:none")
    }
    var fields = row.fields.sort((a, b) => { return a.order - b.order });
    fields.forEach(field => {
        brow.append(CreateControl(field, record, action));
    });
    return brow;
}
function CreateControl(field, row, action) {
    var label = `lbl${field.id}`, style = field.hidden ? "display:none" : "display:block";
    var column = $(`<div></div>`).addClass("form-control-column-spacer col-md-" + field.width);
    if (field.controlType === "hidden") {
        column.attr("style","display:none")
    }
    var inputGroup = $("<div></div>").addClass("input-group");
    var requiredLabel = field.displayName + (field.isRequired ? " <span style='color:red'> *</span>" : "");
    var labelControl = $("<span></span>").addClass("input-group-addon").html(requiredLabel).attr("id", label);
    const control = CreateFormControl(field, row, action);

    inputGroup.append(labelControl).append(control);
    column.append(inputGroup);
    return column;
}
function CreateFormControl(field,row, action) {
    var datePickerClass = field.isDate ? " ui-datepicker" : "";
    var type = field.controlType === "date" ? "text" : field.controlType;
    var multipleSelect = field.multpleSelect ? "multiple" : "";
    var controlCss = `form-control input-sm${datePickerClass}`;
    if (field.type === "file") {
        controlCss = `form-control-file input-sm`;
        $("#Save").attr("enctype", "multipart/form-data");
    }
    var control = $("<input />");
    if (field.isDropDown)
        control = field.onSelectedChange ? $(`<select ${multipleSelect} onchange='TrickleDown(this)'></select>`) : $(`<select ${multipleSelect} ></select>`);
    control.attr("id", field.id)
        .attr("name", field.id)
        .addClass(controlCss)
        .attr("data-default-value", field.defaultValue)
        .attr("data-allowed-value", field.allowedValue)
        .attr("data-autogenerated", field.autogenerated);
    if (field.autogenerated) {
        control.attr("disabled", "disabled")
    }
    if (field.requiredField) {
        control.data('required-field', field.requiredField);
        control.attr('tooltip', field.requiredField.errorMessage);
    }
    if (field.isRequired) {
        control.attr('required', field.isRequired);
        //control.attr('tooltip', field.requiredField.errorMessage);
    }

    if (!field.isDropDown) {
        control
            .attr("type", type).attr("data-type", field.dataType);

        if (field.dataType.includes("date")) {
            control.datepicker({ dateFormat: 'dd-M-yy', changeYear: true, changeMonth: true }).css("z-index", 99999);
        }
        if (field.fieldLength) {
            control.attr('maxLength', field.fieldLength.maximumLength);
            control.attr('minLength', field.fieldLength.minimumLength);
            control.attr('tooltip', field.requiredField.errorMessage);
        }

    } else {
        var url = `/${field.area}/${field.controller}/${field.action}`;
        var selectChange = field.onSelectedChange ? field.onSelectedChange : "";
        var selectField = field.onField ? field.onField : "";
        control.attr("data-select-change", selectChange);
        control.attr("data-select-field", selectField);
        control.attr("data-value", field.valueField);
        control.attr("data-text", field.textField);
        control.attr("data-sort-field", field.sortField);
        control.attr("data-filter-column", field.filterColumn);
        control.attr("data-filter-value", field.filterValue);
        control.attr("data-url", url);
        control.attr("data-controller", field.action !== "BooleanList" ? field.controller : field.action);
        control.addClass("dropdown");
        CreateSingleSelect(control);
    }
    console.log(field);
    if (field.defaultValue) {
        control.val(field.defaultValue);
    }
    if (row) {
        var val = row[field.id];
        if (field.dataType === "date") {
            val = formatDate(val);
        }
        if (field.dataType === "number") {
            val = formatNumber(val);
        }
        control.val(val);
    }
    return control;
}
function CreateSingleSelect(element, id = "", field = "") {

    console.log(element);
    var value = $(element).attr("data-value");
    var controller = $(element).attr("data-controller");;
    var url = $(element).attr("data-url");
    console.log(url);
    var data = { search: "", id: id };
    if (controller === "GetRecordStatus")
        data = {};
    var submissionType = "GET";
    if (controller !== "BooleanList")
        submissionType = "POST";
    console.log(controller, data);
    DoAjax(url, submissionType, data, null,
        function (data) {
            console.log(data, controller);
            //CreateOrUpdateDb(controller, data);
            createSelect(element, data, field, id);
        },
        DisplayModalError
    );


}
function createSelect(element, data, fkKey = null, fkValue = null) {

    var text = $(element).attr("data-text");
    var value = $(element).attr("data-value");
    var sortField = $(element).attr("data-sort-field");
    var filterColumn = $(element).attr("data-filter-column");
    var filterValue = $(element).attr("data-filter-value");

    var selectedValue = $(element).val();
    var defaultValue = $(element).attr("data-default-value");
    var selected = defaultValue ? defaultValue : selectedValue ? selectedValue : "";

    if (filterColumn && filterValue) {
        if (filterValue === "true") {
            data = data.filter(s => s[filterColumn] === true);
        }
        else if (filterValue === "false") {
            data = data.filter(s => s[filterColumn] === false);
        } else {
            data = data.filter(s => s[filterColumn] == filterValue);
        }
    }
    if (fkKey && fkValue) {
        data = data.filter(s => s[fkKey] == fkValue);
    }
    $(element).empty();
    $(element).append($("<option></option>").val("").text("Select ..."));

    var rows = data.sort((a, b) => {
        var va = a[sortField];
        var vb = b[sortField];
        if (va < vb)
            return -1;
        if (va > vb)
            return 1;
        return 0;
    });
    rows.forEach(s => {
        var val = s[value];
        var txt = s[text];
        var isBoolean = selected === "false" || selected === "true" || selected === true || selected === false;
        if (isBoolean) {
            if (selected === "false")
                selected = false;
            else
                selected = true;
        }
        if (selected == val) {

            $(element).append($("<option></option>").val(val).text(txt));
        }
        else
            $(element).append($("<option></option>").val(val).text(txt));
        if (selected)
            $(element).val(selected);
    });
}
function createInterface(action) {
    var path = window.location.pathname.split("/");
    path = path.filter(s => s !== "");
    var url = "/" + path[0]  + "/Find";
    DoAjax(url, "GET", { id: path[2], parentID: null }, null,
        function (data) {
            console.log(data);
            createTabs(data.model, data.record, action);
            LockForm(action, data.model, data.model.idColumn);
            CreateNavigation(data.model.header, action, path[0],path[0]);
            UpdateControlPanel(data.record);
            $("#pageHeader").text(data.model.header)
            $("#recordHeader").text(data.model.header);
            console.log(data)
        }, function (error) { })
}
function CreateNavigation(header, action, area, controller, id) {
    console.log(header,action, area, controller)
    if (header==null)
        return;
    
    var homeAnchor = $("<a></a>").attr("href", "/Home").html($("<i></i> Home").addClass("zmdi zmdi-home"))
    var homeLink = $("<li></li>").addClass("breadcrumb-item").append(homeAnchor);
    var url = "/" + controller;
    if (id)
        url += "/Index/" + id;
    var controllerLink = $("<a></a>").text("Back to Index").attr("href", url);
    var areaHomeLink = $("<li></li>").addClass("breadcrumb-item").append(controllerLink);
    $("#breadcrumb").empty();
    $("#breadcrumb").append(homeLink);
    $("#breadcrumb").append(areaHomeLink);
    $("#breadcrumb").append($("<li></li>").addClass("breadcrumb-item active").text(action));

   
    document.title = header + " ("+action+") - " + document.title.split("-")[1].trim();
}