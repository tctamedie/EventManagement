function PopulateForm() {
    var path = window.location.pathname.split("/");
    path = path.filter(s => s !== "");
    GetDbItem("Configuration", path[1], "controller", (config) => {
        if (!config)
            return;
        $("#divModalError").html("");
        $("#pnlControls").hide();
        $("#divMessage").html("");
        var id = $(this).attr("data-id");
        var action = $(this).attr("data-action");
        var buttonText = $(this).attr("data-text");
        var iconText = $(this).attr('data-icon');
        $("#modalPopup").attr("data-action", action);
        $(this).parent().parent().attr("data-" + action.toLowerCase(), id);
        var modal = config.modal.header;
        //console.log(id, action, modal);
        ClearForm(config.modal);
        LockForm(action, config.modal, config.idColumn);
        createForeignKeyValue(config);
        var modalText = action + " " + modal;

        $("#modalHeader").html(modalText);
        var database = "WFA";
        if (action == "Create") {
            database = "WFA_TEMP";
        }
        console.log(config);
        SetData(id, config, database, action, buttonText, iconText);
        $("#modalPopup").modal({ backdrop: 'static', keyboard: false });
        return false;
    });
}
function ClearForm(config) {
    //var columns = getFields();
    var fields = config.tabs.map(row => row.rows.map(s => s.fields).flat()).flat();
    if (!fields)
        return;
    fields.forEach(field => {
        var s = field.id;
        var id = "#" + s;
        var defaultValue = field.defaultValue;
        var val = defaultValue ? defaultValue : "";
        $(id).val(val);
        clearErrors(s);
    })

    return false;
}
function LockForm(action, config, idColumn) {
    //var columns = getFields();
    var fields = config.tabs.map(row => row.rows.map(s => s.fields).flat()).flat();
    if (!fields)
        return;

    fields.forEach(field => {
        var s = field.id;
        var id = $("#" + s);
        var autogenerated = field.autogenerated;
        var readonly = (autogenerated == 'true' || (action === "Edit" && s === idColumn) || !(action === "Edit" || action === "Create"));
        $(id).attr("readonly", readonly);

    });
}
function clearErrors(s) {

    $("#" + s).removeClass("errorControl");
    $("#" + s).removeAttr("data-toggle");
    $("#" + s).removeAttr("data-placement");
    $("#" + s).removeAttr("title");
    $("#lbl" + s).removeClass("errorLabel");
}
function createForeignKeyValue(config) {
    //console.log(config)
    if (config.id && config.foreignColumn) {
        $("#" + config.foreignColumn).val(config.id);
    }
}
function SetData(idValue, config, database, action, buttonText, iconText) {


    if (!config)
        return;
    var fields = config.modal.tabs.map(tab => tab.rows.map(s => s.modalFields).flat()).flat();
    var searchUrl = "/" + config.area + "/" + config.controller + "/" + config.searchAction;
    var id = config.id ? config.id : "";

    var idColumn = config.idColumn;
    var url = searchUrl + id;
    if (database == "WFA") {
        GetDbItem(config.controller, idValue, idColumn, (record) => {
            console.log(record);
            UpdateForm(record, fields, action, buttonText, iconText);
        }, database);
    } else {
        GetDbState(config.controller, idColumn, (records) => {

            UpdateForm(records[0], fields, action, buttonText, iconText);
        }, database);
    }

}
function UpdateForm(data, fields, action, buttonText, iconText) {
    manageSaveButton(action, buttonText, iconText, data);
    if (data) {
        UpdateControlPanel(data);
        fields.forEach(field => {
            var s = field.id;
            var val = data[s];
            var id = '#' + s;
            if (field.dataType.includes("date") && val != null) {
                val = formatDate(val);
            }
            if (field.dataType.includes("number") && val != null) {
                if (isNaN(val))
                    val = val.replace(",", "");
                val = formatNumber(val);
            }
            if ($(id).hasClass("dropdown")) {
                val = val ? val : "";
                if (field.dataType.includes("bool")) {
                    if (val === true)
                        val = "true";
                    if (val === false || val === "")
                        val = "false"
                } else {
                    val = val + "";
                }
            }
            $(id).val(val);
        });
    }
}
function manageSaveButton(action, buttonText, iconText, row) {
    var buttonClass = "btn-success";
    $("#btnSaveLater").hide();
    $("#btnSave").show();
    if (action === "Delete") {
        buttonClass = "btn-red";
    }
    else if (action === "View") {
        $("#btnSave").hide();
    }
    else if (action === "Create") {
        $("#btnSaveLater").show();
    }

    if ($("#btnSave").hasClass("btn-success"))
        $("#btnSave").removeClass("btn-success")
    if ($("#btnSave").hasClass("btn-red"))
        $("#btnSave").removeClass("btn-red");
    console.log(iconText, buttonText, action);
    const icon = createButtonText(iconText, buttonText, action);
    console.log(iconText, buttonText, action, icon)
    $("#btnSave").html(icon);
    $("#btnSave").addClass(buttonClass);

}
function createButtonText(iconText, buttonText, action, row) {
    return "<i class='fa fa-" + iconText + "'></i>&nbsp;" + buttonText;
}
function UpdateControlPanel(item) {
    if (item) {
        $("#pnlControls").show();
        var createdBy = $("<b></b>").text(+item["createdBy"]);
        var modifiedBy = $("<b></b>").text(+item["modifiedBy"]);
        $("#createdBy").append(createdBy)
        $("#modifiedBy").append(modifiedBy)
        
    }
}